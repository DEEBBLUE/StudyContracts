// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: sso.proto

package SSO

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SSO_CreateUser_FullMethodName = "/sso.SSO/CreateUser"
	SSO_UpdateUser_FullMethodName = "/sso.SSO/UpdateUser"
	SSO_DeleteUser_FullMethodName = "/sso.SSO/DeleteUser"
	SSO_WhoIme_FullMethodName     = "/sso.SSO/WhoIme"
	SSO_Validation_FullMethodName = "/sso.SSO/Validation"
)

// SSOClient is the client API for SSO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSOClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Responce, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Responce, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Responce, error)
	WhoIme(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*WhoImeRes, error)
	Validation(ctx context.Context, in *ValidationRes, opts ...grpc.CallOption) (*Responce, error)
}

type sSOClient struct {
	cc grpc.ClientConnInterface
}

func NewSSOClient(cc grpc.ClientConnInterface) SSOClient {
	return &sSOClient{cc}
}

func (c *sSOClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, SSO_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, SSO_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, SSO_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) WhoIme(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*WhoImeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoImeRes)
	err := c.cc.Invoke(ctx, SSO_WhoIme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSOClient) Validation(ctx context.Context, in *ValidationRes, opts ...grpc.CallOption) (*Responce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Responce)
	err := c.cc.Invoke(ctx, SSO_Validation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSOServer is the server API for SSO service.
// All implementations must embed UnimplementedSSOServer
// for forward compatibility.
type SSOServer interface {
	CreateUser(context.Context, *User) (*Responce, error)
	UpdateUser(context.Context, *User) (*Responce, error)
	DeleteUser(context.Context, *UserId) (*Responce, error)
	WhoIme(context.Context, *UserId) (*WhoImeRes, error)
	Validation(context.Context, *ValidationRes) (*Responce, error)
	mustEmbedUnimplementedSSOServer()
}

// UnimplementedSSOServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSSOServer struct{}

func (UnimplementedSSOServer) CreateUser(context.Context, *User) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedSSOServer) UpdateUser(context.Context, *User) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedSSOServer) DeleteUser(context.Context, *UserId) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedSSOServer) WhoIme(context.Context, *UserId) (*WhoImeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoIme not implemented")
}
func (UnimplementedSSOServer) Validation(context.Context, *ValidationRes) (*Responce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validation not implemented")
}
func (UnimplementedSSOServer) mustEmbedUnimplementedSSOServer() {}
func (UnimplementedSSOServer) testEmbeddedByValue()             {}

// UnsafeSSOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSOServer will
// result in compilation errors.
type UnsafeSSOServer interface {
	mustEmbedUnimplementedSSOServer()
}

func RegisterSSOServer(s grpc.ServiceRegistrar, srv SSOServer) {
	// If the following call pancis, it indicates UnimplementedSSOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SSO_ServiceDesc, srv)
}

func _SSO_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_WhoIme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).WhoIme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_WhoIme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).WhoIme(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSO_Validation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSOServer).Validation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SSO_Validation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSOServer).Validation(ctx, req.(*ValidationRes))
	}
	return interceptor(ctx, in, info, handler)
}

// SSO_ServiceDesc is the grpc.ServiceDesc for SSO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sso.SSO",
	HandlerType: (*SSOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _SSO_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _SSO_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _SSO_DeleteUser_Handler,
		},
		{
			MethodName: "WhoIme",
			Handler:    _SSO_WhoIme_Handler,
		},
		{
			MethodName: "Validation",
			Handler:    _SSO_Validation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
